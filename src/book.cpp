/*
  Stockfish, a UCI chess playing engine derived from Glaurung 2.1
  Copyright (C) 2004-2008 Tord Romstad (Glaurung author)
  Copyright (C) 2008-2012 Marco Costalba, Joona Kiiski, Tord Romstad

  Stockfish is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Stockfish is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
  The code in this file is based on the opening book code in PolyGlot
  by Fabien Letouzey. PolyGlot is available under the GNU General
  Public License, and can be downloaded from http://wbec-ridderkerk.nl
*/

#include <algorithm>
#include <cassert>
#include <iostream>

#include "book.h"
#include "misc.h"
#include "movegen.h"

using namespace std;

namespace {

  // Random numbers from PolyGlot, used to compute book hash keys
  const Key PolyGlotRandoms[781] = {
    Key(0x9D39247E33776D41ULL), Key(0x2AF7398005AAA5C7ULL), Key(0x44DB015024623547ULL),
    Key(0x9C15F73E62A76AE2ULL), Key(0x75834465489C0C89ULL), Key(0x3290AC3A203001BFULL),
    Key(0x0FBBAD1F61042279ULL), Key(0xE83A908FF2FB60CAULL), Key(0x0D7E765D58755C10ULL),
    Key(0x1A083822CEAFE02DULL), Key(0x9605D5F0E25EC3B0ULL), Key(0xD021FF5CD13A2ED5ULL),
    Key(0x40BDF15D4A672E32ULL), Key(0x011355146FD56395ULL), Key(0x5DB4832046F3D9E5ULL),
    Key(0x239F8B2D7FF719CCULL), Key(0x05D1A1AE85B49AA1ULL), Key(0x679F848F6E8FC971ULL),
    Key(0x7449BBFF801FED0BULL), Key(0x7D11CDB1C3B7ADF0ULL), Key(0x82C7709E781EB7CCULL),
    Key(0xF3218F1C9510786CULL), Key(0x331478F3AF51BBE6ULL), Key(0x4BB38DE5E7219443ULL),
    Key(0xAA649C6EBCFD50FCULL), Key(0x8DBD98A352AFD40BULL), Key(0x87D2074B81D79217ULL),
    Key(0x19F3C751D3E92AE1ULL), Key(0xB4AB30F062B19ABFULL), Key(0x7B0500AC42047AC4ULL),
    Key(0xC9452CA81A09D85DULL), Key(0x24AA6C514DA27500ULL), Key(0x4C9F34427501B447ULL),
    Key(0x14A68FD73C910841ULL), Key(0xA71B9B83461CBD93ULL), Key(0x03488B95B0F1850FULL),
    Key(0x637B2B34FF93C040ULL), Key(0x09D1BC9A3DD90A94ULL), Key(0x3575668334A1DD3BULL),
    Key(0x735E2B97A4C45A23ULL), Key(0x18727070F1BD400BULL), Key(0x1FCBACD259BF02E7ULL),
    Key(0xD310A7C2CE9B6555ULL), Key(0xBF983FE0FE5D8244ULL), Key(0x9F74D14F7454A824ULL),
    Key(0x51EBDC4AB9BA3035ULL), Key(0x5C82C505DB9AB0FAULL), Key(0xFCF7FE8A3430B241ULL),
    Key(0x3253A729B9BA3DDEULL), Key(0x8C74C368081B3075ULL), Key(0xB9BC6C87167C33E7ULL),
    Key(0x7EF48F2B83024E20ULL), Key(0x11D505D4C351BD7FULL), Key(0x6568FCA92C76A243ULL),
    Key(0x4DE0B0F40F32A7B8ULL), Key(0x96D693460CC37E5DULL), Key(0x42E240CB63689F2FULL),
    Key(0x6D2BDCDAE2919661ULL), Key(0x42880B0236E4D951ULL), Key(0x5F0F4A5898171BB6ULL),
    Key(0x39F890F579F92F88ULL), Key(0x93C5B5F47356388BULL), Key(0x63DC359D8D231B78ULL),
    Key(0xEC16CA8AEA98AD76ULL), Key(0x5355F900C2A82DC7ULL), Key(0x07FB9F855A997142ULL),
    Key(0x5093417AA8A7ED5EULL), Key(0x7BCBC38DA25A7F3CULL), Key(0x19FC8A768CF4B6D4ULL),
    Key(0x637A7780DECFC0D9ULL), Key(0x8249A47AEE0E41F7ULL), Key(0x79AD695501E7D1E8ULL),
    Key(0x14ACBAF4777D5776ULL), Key(0xF145B6BECCDEA195ULL), Key(0xDABF2AC8201752FCULL),
    Key(0x24C3C94DF9C8D3F6ULL), Key(0xBB6E2924F03912EAULL), Key(0x0CE26C0B95C980D9ULL),
    Key(0xA49CD132BFBF7CC4ULL), Key(0xE99D662AF4243939ULL), Key(0x27E6AD7891165C3FULL),
    Key(0x8535F040B9744FF1ULL), Key(0x54B3F4FA5F40D873ULL), Key(0x72B12C32127FED2BULL),
    Key(0xEE954D3C7B411F47ULL), Key(0x9A85AC909A24EAA1ULL), Key(0x70AC4CD9F04F21F5ULL),
    Key(0xF9B89D3E99A075C2ULL), Key(0x87B3E2B2B5C907B1ULL), Key(0xA366E5B8C54F48B8ULL),
    Key(0xAE4A9346CC3F7CF2ULL), Key(0x1920C04D47267BBDULL), Key(0x87BF02C6B49E2AE9ULL),
    Key(0x092237AC237F3859ULL), Key(0xFF07F64EF8ED14D0ULL), Key(0x8DE8DCA9F03CC54EULL),
    Key(0x9C1633264DB49C89ULL), Key(0xB3F22C3D0B0B38EDULL), Key(0x390E5FB44D01144BULL),
    Key(0x5BFEA5B4712768E9ULL), Key(0x1E1032911FA78984ULL), Key(0x9A74ACB964E78CB3ULL),
    Key(0x4F80F7A035DAFB04ULL), Key(0x6304D09A0B3738C4ULL), Key(0x2171E64683023A08ULL),
    Key(0x5B9B63EB9CEFF80CULL), Key(0x506AACF489889342ULL), Key(0x1881AFC9A3A701D6ULL),
    Key(0x6503080440750644ULL), Key(0xDFD395339CDBF4A7ULL), Key(0xEF927DBCF00C20F2ULL),
    Key(0x7B32F7D1E03680ECULL), Key(0xB9FD7620E7316243ULL), Key(0x05A7E8A57DB91B77ULL),
    Key(0xB5889C6E15630A75ULL), Key(0x4A750A09CE9573F7ULL), Key(0xCF464CEC899A2F8AULL),
    Key(0xF538639CE705B824ULL), Key(0x3C79A0FF5580EF7FULL), Key(0xEDE6C87F8477609DULL),
    Key(0x799E81F05BC93F31ULL), Key(0x86536B8CF3428A8CULL), Key(0x97D7374C60087B73ULL),
    Key(0xA246637CFF328532ULL), Key(0x043FCAE60CC0EBA0ULL), Key(0x920E449535DD359EULL),
    Key(0x70EB093B15B290CCULL), Key(0x73A1921916591CBDULL), Key(0x56436C9FE1A1AA8DULL),
    Key(0xEFAC4B70633B8F81ULL), Key(0xBB215798D45DF7AFULL), Key(0x45F20042F24F1768ULL),
    Key(0x930F80F4E8EB7462ULL), Key(0xFF6712FFCFD75EA1ULL), Key(0xAE623FD67468AA70ULL),
    Key(0xDD2C5BC84BC8D8FCULL), Key(0x7EED120D54CF2DD9ULL), Key(0x22FE545401165F1CULL),
    Key(0xC91800E98FB99929ULL), Key(0x808BD68E6AC10365ULL), Key(0xDEC468145B7605F6ULL),
    Key(0x1BEDE3A3AEF53302ULL), Key(0x43539603D6C55602ULL), Key(0xAA969B5C691CCB7AULL),
    Key(0xA87832D392EFEE56ULL), Key(0x65942C7B3C7E11AEULL), Key(0xDED2D633CAD004F6ULL),
    Key(0x21F08570F420E565ULL), Key(0xB415938D7DA94E3CULL), Key(0x91B859E59ECB6350ULL),
    Key(0x10CFF333E0ED804AULL), Key(0x28AED140BE0BB7DDULL), Key(0xC5CC1D89724FA456ULL),
    Key(0x5648F680F11A2741ULL), Key(0x2D255069F0B7DAB3ULL), Key(0x9BC5A38EF729ABD4ULL),
    Key(0xEF2F054308F6A2BCULL), Key(0xAF2042F5CC5C2858ULL), Key(0x480412BAB7F5BE2AULL),
    Key(0xAEF3AF4A563DFE43ULL), Key(0x19AFE59AE451497FULL), Key(0x52593803DFF1E840ULL),
    Key(0xF4F076E65F2CE6F0ULL), Key(0x11379625747D5AF3ULL), Key(0xBCE5D2248682C115ULL),
    Key(0x9DA4243DE836994FULL), Key(0x066F70B33FE09017ULL), Key(0x4DC4DE189B671A1CULL),
    Key(0x51039AB7712457C3ULL), Key(0xC07A3F80C31FB4B4ULL), Key(0xB46EE9C5E64A6E7CULL),
    Key(0xB3819A42ABE61C87ULL), Key(0x21A007933A522A20ULL), Key(0x2DF16F761598AA4FULL),
    Key(0x763C4A1371B368FDULL), Key(0xF793C46702E086A0ULL), Key(0xD7288E012AEB8D31ULL),
    Key(0xDE336A2A4BC1C44BULL), Key(0x0BF692B38D079F23ULL), Key(0x2C604A7A177326B3ULL),
    Key(0x4850E73E03EB6064ULL), Key(0xCFC447F1E53C8E1BULL), Key(0xB05CA3F564268D99ULL),
    Key(0x9AE182C8BC9474E8ULL), Key(0xA4FC4BD4FC5558CAULL), Key(0xE755178D58FC4E76ULL),
    Key(0x69B97DB1A4C03DFEULL), Key(0xF9B5B7C4ACC67C96ULL), Key(0xFC6A82D64B8655FBULL),
    Key(0x9C684CB6C4D24417ULL), Key(0x8EC97D2917456ED0ULL), Key(0x6703DF9D2924E97EULL),
    Key(0xC547F57E42A7444EULL), Key(0x78E37644E7CAD29EULL), Key(0xFE9A44E9362F05FAULL),
    Key(0x08BD35CC38336615ULL), Key(0x9315E5EB3A129ACEULL), Key(0x94061B871E04DF75ULL),
    Key(0xDF1D9F9D784BA010ULL), Key(0x3BBA57B68871B59DULL), Key(0xD2B7ADEEDED1F73FULL),
    Key(0xF7A255D83BC373F8ULL), Key(0xD7F4F2448C0CEB81ULL), Key(0xD95BE88CD210FFA7ULL),
    Key(0x336F52F8FF4728E7ULL), Key(0xA74049DAC312AC71ULL), Key(0xA2F61BB6E437FDB5ULL),
    Key(0x4F2A5CB07F6A35B3ULL), Key(0x87D380BDA5BF7859ULL), Key(0x16B9F7E06C453A21ULL),
    Key(0x7BA2484C8A0FD54EULL), Key(0xF3A678CAD9A2E38CULL), Key(0x39B0BF7DDE437BA2ULL),
    Key(0xFCAF55C1BF8A4424ULL), Key(0x18FCF680573FA594ULL), Key(0x4C0563B89F495AC3ULL),
    Key(0x40E087931A00930DULL), Key(0x8CFFA9412EB642C1ULL), Key(0x68CA39053261169FULL),
    Key(0x7A1EE967D27579E2ULL), Key(0x9D1D60E5076F5B6FULL), Key(0x3810E399B6F65BA2ULL),
    Key(0x32095B6D4AB5F9B1ULL), Key(0x35CAB62109DD038AULL), Key(0xA90B24499FCFAFB1ULL),
    Key(0x77A225A07CC2C6BDULL), Key(0x513E5E634C70E331ULL), Key(0x4361C0CA3F692F12ULL),
    Key(0xD941ACA44B20A45BULL), Key(0x528F7C8602C5807BULL), Key(0x52AB92BEB9613989ULL),
    Key(0x9D1DFA2EFC557F73ULL), Key(0x722FF175F572C348ULL), Key(0x1D1260A51107FE97ULL),
    Key(0x7A249A57EC0C9BA2ULL), Key(0x04208FE9E8F7F2D6ULL), Key(0x5A110C6058B920A0ULL),
    Key(0x0CD9A497658A5698ULL), Key(0x56FD23C8F9715A4CULL), Key(0x284C847B9D887AAEULL),
    Key(0x04FEABFBBDB619CBULL), Key(0x742E1E651C60BA83ULL), Key(0x9A9632E65904AD3CULL),
    Key(0x881B82A13B51B9E2ULL), Key(0x506E6744CD974924ULL), Key(0xB0183DB56FFC6A79ULL),
    Key(0x0ED9B915C66ED37EULL), Key(0x5E11E86D5873D484ULL), Key(0xF678647E3519AC6EULL),
    Key(0x1B85D488D0F20CC5ULL), Key(0xDAB9FE6525D89021ULL), Key(0x0D151D86ADB73615ULL),
    Key(0xA865A54EDCC0F019ULL), Key(0x93C42566AEF98FFBULL), Key(0x99E7AFEABE000731ULL),
    Key(0x48CBFF086DDF285AULL), Key(0x7F9B6AF1EBF78BAFULL), Key(0x58627E1A149BBA21ULL),
    Key(0x2CD16E2ABD791E33ULL), Key(0xD363EFF5F0977996ULL), Key(0x0CE2A38C344A6EEDULL),
    Key(0x1A804AADB9CFA741ULL), Key(0x907F30421D78C5DEULL), Key(0x501F65EDB3034D07ULL),
    Key(0x37624AE5A48FA6E9ULL), Key(0x957BAF61700CFF4EULL), Key(0x3A6C27934E31188AULL),
    Key(0xD49503536ABCA345ULL), Key(0x088E049589C432E0ULL), Key(0xF943AEE7FEBF21B8ULL),
    Key(0x6C3B8E3E336139D3ULL), Key(0x364F6FFA464EE52EULL), Key(0xD60F6DCEDC314222ULL),
    Key(0x56963B0DCA418FC0ULL), Key(0x16F50EDF91E513AFULL), Key(0xEF1955914B609F93ULL),
    Key(0x565601C0364E3228ULL), Key(0xECB53939887E8175ULL), Key(0xBAC7A9A18531294BULL),
    Key(0xB344C470397BBA52ULL), Key(0x65D34954DAF3CEBDULL), Key(0xB4B81B3FA97511E2ULL),
    Key(0xB422061193D6F6A7ULL), Key(0x071582401C38434DULL), Key(0x7A13F18BBEDC4FF5ULL),
    Key(0xBC4097B116C524D2ULL), Key(0x59B97885E2F2EA28ULL), Key(0x99170A5DC3115544ULL),
    Key(0x6F423357E7C6A9F9ULL), Key(0x325928EE6E6F8794ULL), Key(0xD0E4366228B03343ULL),
    Key(0x565C31F7DE89EA27ULL), Key(0x30F5611484119414ULL), Key(0xD873DB391292ED4FULL),
    Key(0x7BD94E1D8E17DEBCULL), Key(0xC7D9F16864A76E94ULL), Key(0x947AE053EE56E63CULL),
    Key(0xC8C93882F9475F5FULL), Key(0x3A9BF55BA91F81CAULL), Key(0xD9A11FBB3D9808E4ULL),
    Key(0x0FD22063EDC29FCAULL), Key(0xB3F256D8ACA0B0B9ULL), Key(0xB03031A8B4516E84ULL),
    Key(0x35DD37D5871448AFULL), Key(0xE9F6082B05542E4EULL), Key(0xEBFAFA33D7254B59ULL),
    Key(0x9255ABB50D532280ULL), Key(0xB9AB4CE57F2D34F3ULL), Key(0x693501D628297551ULL),
    Key(0xC62C58F97DD949BFULL), Key(0xCD454F8F19C5126AULL), Key(0xBBE83F4ECC2BDECBULL),
    Key(0xDC842B7E2819E230ULL), Key(0xBA89142E007503B8ULL), Key(0xA3BC941D0A5061CBULL),
    Key(0xE9F6760E32CD8021ULL), Key(0x09C7E552BC76492FULL), Key(0x852F54934DA55CC9ULL),
    Key(0x8107FCCF064FCF56ULL), Key(0x098954D51FFF6580ULL), Key(0x23B70EDB1955C4BFULL),
    Key(0xC330DE426430F69DULL), Key(0x4715ED43E8A45C0AULL), Key(0xA8D7E4DAB780A08DULL),
    Key(0x0572B974F03CE0BBULL), Key(0xB57D2E985E1419C7ULL), Key(0xE8D9ECBE2CF3D73FULL),
    Key(0x2FE4B17170E59750ULL), Key(0x11317BA87905E790ULL), Key(0x7FBF21EC8A1F45ECULL),
    Key(0x1725CABFCB045B00ULL), Key(0x964E915CD5E2B207ULL), Key(0x3E2B8BCBF016D66DULL),
    Key(0xBE7444E39328A0ACULL), Key(0xF85B2B4FBCDE44B7ULL), Key(0x49353FEA39BA63B1ULL),
    Key(0x1DD01AAFCD53486AULL), Key(0x1FCA8A92FD719F85ULL), Key(0xFC7C95D827357AFAULL),
    Key(0x18A6A990C8B35EBDULL), Key(0xCCCB7005C6B9C28DULL), Key(0x3BDBB92C43B17F26ULL),
    Key(0xAA70B5B4F89695A2ULL), Key(0xE94C39A54A98307FULL), Key(0xB7A0B174CFF6F36EULL),
    Key(0xD4DBA84729AF48ADULL), Key(0x2E18BC1AD9704A68ULL), Key(0x2DE0966DAF2F8B1CULL),
    Key(0xB9C11D5B1E43A07EULL), Key(0x64972D68DEE33360ULL), Key(0x94628D38D0C20584ULL),
    Key(0xDBC0D2B6AB90A559ULL), Key(0xD2733C4335C6A72FULL), Key(0x7E75D99D94A70F4DULL),
    Key(0x6CED1983376FA72BULL), Key(0x97FCAACBF030BC24ULL), Key(0x7B77497B32503B12ULL),
    Key(0x8547EDDFB81CCB94ULL), Key(0x79999CDFF70902CBULL), Key(0xCFFE1939438E9B24ULL),
    Key(0x829626E3892D95D7ULL), Key(0x92FAE24291F2B3F1ULL), Key(0x63E22C147B9C3403ULL),
    Key(0xC678B6D860284A1CULL), Key(0x5873888850659AE7ULL), Key(0x0981DCD296A8736DULL),
    Key(0x9F65789A6509A440ULL), Key(0x9FF38FED72E9052FULL), Key(0xE479EE5B9930578CULL),
    Key(0xE7F28ECD2D49EECDULL), Key(0x56C074A581EA17FEULL), Key(0x5544F7D774B14AEFULL),
    Key(0x7B3F0195FC6F290FULL), Key(0x12153635B2C0CF57ULL), Key(0x7F5126DBBA5E0CA7ULL),
    Key(0x7A76956C3EAFB413ULL), Key(0x3D5774A11D31AB39ULL), Key(0x8A1B083821F40CB4ULL),
    Key(0x7B4A38E32537DF62ULL), Key(0x950113646D1D6E03ULL), Key(0x4DA8979A0041E8A9ULL),
    Key(0x3BC36E078F7515D7ULL), Key(0x5D0A12F27AD310D1ULL), Key(0x7F9D1A2E1EBE1327ULL),
    Key(0xDA3A361B1C5157B1ULL), Key(0xDCDD7D20903D0C25ULL), Key(0x36833336D068F707ULL),
    Key(0xCE68341F79893389ULL), Key(0xAB9090168DD05F34ULL), Key(0x43954B3252DC25E5ULL),
    Key(0xB438C2B67F98E5E9ULL), Key(0x10DCD78E3851A492ULL), Key(0xDBC27AB5447822BFULL),
    Key(0x9B3CDB65F82CA382ULL), Key(0xB67B7896167B4C84ULL), Key(0xBFCED1B0048EAC50ULL),
    Key(0xA9119B60369FFEBDULL), Key(0x1FFF7AC80904BF45ULL), Key(0xAC12FB171817EEE7ULL),
    Key(0xAF08DA9177DDA93DULL), Key(0x1B0CAB936E65C744ULL), Key(0xB559EB1D04E5E932ULL),
    Key(0xC37B45B3F8D6F2BAULL), Key(0xC3A9DC228CAAC9E9ULL), Key(0xF3B8B6675A6507FFULL),
    Key(0x9FC477DE4ED681DAULL), Key(0x67378D8ECCEF96CBULL), Key(0x6DD856D94D259236ULL),
    Key(0xA319CE15B0B4DB31ULL), Key(0x073973751F12DD5EULL), Key(0x8A8E849EB32781A5ULL),
    Key(0xE1925C71285279F5ULL), Key(0x74C04BF1790C0EFEULL), Key(0x4DDA48153C94938AULL),
    Key(0x9D266D6A1CC0542CULL), Key(0x7440FB816508C4FEULL), Key(0x13328503DF48229FULL),
    Key(0xD6BF7BAEE43CAC40ULL), Key(0x4838D65F6EF6748FULL), Key(0x1E152328F3318DEAULL),
    Key(0x8F8419A348F296BFULL), Key(0x72C8834A5957B511ULL), Key(0xD7A023A73260B45CULL),
    Key(0x94EBC8ABCFB56DAEULL), Key(0x9FC10D0F989993E0ULL), Key(0xDE68A2355B93CAE6ULL),
    Key(0xA44CFE79AE538BBEULL), Key(0x9D1D84FCCE371425ULL), Key(0x51D2B1AB2DDFB636ULL),
    Key(0x2FD7E4B9E72CD38CULL), Key(0x65CA5B96B7552210ULL), Key(0xDD69A0D8AB3B546DULL),
    Key(0x604D51B25FBF70E2ULL), Key(0x73AA8A564FB7AC9EULL), Key(0x1A8C1E992B941148ULL),
    Key(0xAAC40A2703D9BEA0ULL), Key(0x764DBEAE7FA4F3A6ULL), Key(0x1E99B96E70A9BE8BULL),
    Key(0x2C5E9DEB57EF4743ULL), Key(0x3A938FEE32D29981ULL), Key(0x26E6DB8FFDF5ADFEULL),
    Key(0x469356C504EC9F9DULL), Key(0xC8763C5B08D1908CULL), Key(0x3F6C6AF859D80055ULL),
    Key(0x7F7CC39420A3A545ULL), Key(0x9BFB227EBDF4C5CEULL), Key(0x89039D79D6FC5C5CULL),
    Key(0x8FE88B57305E2AB6ULL), Key(0xA09E8C8C35AB96DEULL), Key(0xFA7E393983325753ULL),
    Key(0xD6B6D0ECC617C699ULL), Key(0xDFEA21EA9E7557E3ULL), Key(0xB67C1FA481680AF8ULL),
    Key(0xCA1E3785A9E724E5ULL), Key(0x1CFC8BED0D681639ULL), Key(0xD18D8549D140CAEAULL),
    Key(0x4ED0FE7E9DC91335ULL), Key(0xE4DBF0634473F5D2ULL), Key(0x1761F93A44D5AEFEULL),
    Key(0x53898E4C3910DA55ULL), Key(0x734DE8181F6EC39AULL), Key(0x2680B122BAA28D97ULL),
    Key(0x298AF231C85BAFABULL), Key(0x7983EED3740847D5ULL), Key(0x66C1A2A1A60CD889ULL),
    Key(0x9E17E49642A3E4C1ULL), Key(0xEDB454E7BADC0805ULL), Key(0x50B704CAB602C329ULL),
    Key(0x4CC317FB9CDDD023ULL), Key(0x66B4835D9EAFEA22ULL), Key(0x219B97E26FFC81BDULL),
    Key(0x261E4E4C0A333A9DULL), Key(0x1FE2CCA76517DB90ULL), Key(0xD7504DFA8816EDBBULL),
    Key(0xB9571FA04DC089C8ULL), Key(0x1DDC0325259B27DEULL), Key(0xCF3F4688801EB9AAULL),
    Key(0xF4F5D05C10CAB243ULL), Key(0x38B6525C21A42B0EULL), Key(0x36F60E2BA4FA6800ULL),
    Key(0xEB3593803173E0CEULL), Key(0x9C4CD6257C5A3603ULL), Key(0xAF0C317D32ADAA8AULL),
    Key(0x258E5A80C7204C4BULL), Key(0x8B889D624D44885DULL), Key(0xF4D14597E660F855ULL),
    Key(0xD4347F66EC8941C3ULL), Key(0xE699ED85B0DFB40DULL), Key(0x2472F6207C2D0484ULL),
    Key(0xC2A1E7B5B459AEB5ULL), Key(0xAB4F6451CC1D45ECULL), Key(0x63767572AE3D6174ULL),
    Key(0xA59E0BD101731A28ULL), Key(0x116D0016CB948F09ULL), Key(0x2CF9C8CA052F6E9FULL),
    Key(0x0B090A7560A968E3ULL), Key(0xABEEDDB2DDE06FF1ULL), Key(0x58EFC10B06A2068DULL),
    Key(0xC6E57A78FBD986E0ULL), Key(0x2EAB8CA63CE802D7ULL), Key(0x14A195640116F336ULL),
    Key(0x7C0828DD624EC390ULL), Key(0xD74BBE77E6116AC7ULL), Key(0x804456AF10F5FB53ULL),
    Key(0xEBE9EA2ADF4321C7ULL), Key(0x03219A39EE587A30ULL), Key(0x49787FEF17AF9924ULL),
    Key(0xA1E9300CD8520548ULL), Key(0x5B45E522E4B1B4EFULL), Key(0xB49C3B3995091A36ULL),
    Key(0xD4490AD526F14431ULL), Key(0x12A8F216AF9418C2ULL), Key(0x001F837CC7350524ULL),
    Key(0x1877B51E57A764D5ULL), Key(0xA2853B80F17F58EEULL), Key(0x993E1DE72D36D310ULL),
    Key(0xB3598080CE64A656ULL), Key(0x252F59CF0D9F04BBULL), Key(0xD23C8E176D113600ULL),
    Key(0x1BDA0492E7E4586EULL), Key(0x21E0BD5026C619BFULL), Key(0x3B097ADAF088F94EULL),
    Key(0x8D14DEDB30BE846EULL), Key(0xF95CFFA23AF5F6F4ULL), Key(0x3871700761B3F743ULL),
    Key(0xCA672B91E9E4FA16ULL), Key(0x64C8E531BFF53B55ULL), Key(0x241260ED4AD1E87DULL),
    Key(0x106C09B972D2E822ULL), Key(0x7FBA195410E5CA30ULL), Key(0x7884D9BC6CB569D8ULL),
    Key(0x0647DFEDCD894A29ULL), Key(0x63573FF03E224774ULL), Key(0x4FC8E9560F91B123ULL),
    Key(0x1DB956E450275779ULL), Key(0xB8D91274B9E9D4FBULL), Key(0xA2EBEE47E2FBFCE1ULL),
    Key(0xD9F1F30CCD97FB09ULL), Key(0xEFED53D75FD64E6BULL), Key(0x2E6D02C36017F67FULL),
    Key(0xA9AA4D20DB084E9BULL), Key(0xB64BE8D8B25396C1ULL), Key(0x70CB6AF7C2D5BCF0ULL),
    Key(0x98F076A4F7A2322EULL), Key(0xBF84470805E69B5FULL), Key(0x94C3251F06F90CF3ULL),
    Key(0x3E003E616A6591E9ULL), Key(0xB925A6CD0421AFF3ULL), Key(0x61BDD1307C66E300ULL),
    Key(0xBF8D5108E27E0D48ULL), Key(0x240AB57A8B888B20ULL), Key(0xFC87614BAF287E07ULL),
    Key(0xEF02CDD06FFDB432ULL), Key(0xA1082C0466DF6C0AULL), Key(0x8215E577001332C8ULL),
    Key(0xD39BB9C3A48DB6CFULL), Key(0x2738259634305C14ULL), Key(0x61CF4F94C97DF93DULL),
    Key(0x1B6BACA2AE4E125BULL), Key(0x758F450C88572E0BULL), Key(0x959F587D507A8359ULL),
    Key(0xB063E962E045F54DULL), Key(0x60E8ED72C0DFF5D1ULL), Key(0x7B64978555326F9FULL),
    Key(0xFD080D236DA814BAULL), Key(0x8C90FD9B083F4558ULL), Key(0x106F72FE81E2C590ULL),
    Key(0x7976033A39F7D952ULL), Key(0xA4EC0132764CA04BULL), Key(0x733EA705FAE4FA77ULL),
    Key(0xB4D8F77BC3E56167ULL), Key(0x9E21F4F903B33FD9ULL), Key(0x9D765E419FB69F6DULL),
    Key(0xD30C088BA61EA5EFULL), Key(0x5D94337FBFAF7F5BULL), Key(0x1A4E4822EB4D7A59ULL),
    Key(0x6FFE73E81B637FB3ULL), Key(0xDDF957BC36D8B9CAULL), Key(0x64D0E29EEA8838B3ULL),
    Key(0x08DD9BDFD96B9F63ULL), Key(0x087E79E5A57D1D13ULL), Key(0xE328E230E3E2B3FBULL),
    Key(0x1C2559E30F0946BEULL), Key(0x720BF5F26F4D2EAAULL), Key(0xB0774D261CC609DBULL),
    Key(0x443F64EC5A371195ULL), Key(0x4112CF68649A260EULL), Key(0xD813F2FAB7F5C5CAULL),
    Key(0x660D3257380841EEULL), Key(0x59AC2C7873F910A3ULL), Key(0xE846963877671A17ULL),
    Key(0x93B633ABFA3469F8ULL), Key(0xC0C0F5A60EF4CDCFULL), Key(0xCAF21ECD4377B28CULL),
    Key(0x57277707199B8175ULL), Key(0x506C11B9D90E8B1DULL), Key(0xD83CC2687A19255FULL),
    Key(0x4A29C6465A314CD1ULL), Key(0xED2DF21216235097ULL), Key(0xB5635C95FF7296E2ULL),
    Key(0x22AF003AB672E811ULL), Key(0x52E762596BF68235ULL), Key(0x9AEBA33AC6ECC6B0ULL),
    Key(0x944F6DE09134DFB6ULL), Key(0x6C47BEC883A7DE39ULL), Key(0x6AD047C430A12104ULL),
    Key(0xA5B1CFDBA0AB4067ULL), Key(0x7C45D833AFF07862ULL), Key(0x5092EF950A16DA0BULL),
    Key(0x9338E69C052B8E7BULL), Key(0x455A4B4CFE30E3F5ULL), Key(0x6B02E63195AD0CF8ULL),
    Key(0x6B17B224BAD6BF27ULL), Key(0xD1E0CCD25BB9C169ULL), Key(0xDE0C89A556B9AE70ULL),
    Key(0x50065E535A213CF6ULL), Key(0x9C1169FA2777B874ULL), Key(0x78EDEFD694AF1EEDULL),
    Key(0x6DC93D9526A50E68ULL), Key(0xEE97F453F06791EDULL), Key(0x32AB0EDB696703D3ULL),
    Key(0x3A6853C7E70757A7ULL), Key(0x31865CED6120F37DULL), Key(0x67FEF95D92607890ULL),
    Key(0x1F2B1D1F15F6DC9CULL), Key(0xB69E38A8965C6B65ULL), Key(0xAA9119FF184CCCF4ULL),
    Key(0xF43C732873F24C13ULL), Key(0xFB4A3D794A9A80D2ULL), Key(0x3550C2321FD6109CULL),
    Key(0x371F77E76BB8417EULL), Key(0x6BFA9AAE5EC05779ULL), Key(0xCD04F3FF001A4778ULL),
    Key(0xE3273522064480CAULL), Key(0x9F91508BFFCFC14AULL), Key(0x049A7F41061A9E60ULL),
    Key(0xFCB6BE43A9F2FE9BULL), Key(0x08DE8A1C7797DA9BULL), Key(0x8F9887E6078735A1ULL),
    Key(0xB5B4071DBFC73A66ULL), Key(0x230E343DFBA08D33ULL), Key(0x43ED7F5A0FAE657DULL),
    Key(0x3A88A0FBBCB05C63ULL), Key(0x21874B8B4D2DBC4FULL), Key(0x1BDEA12E35F6A8C9ULL),
    Key(0x53C065C6C8E63528ULL), Key(0xE34A1D250E7A8D6BULL), Key(0xD6B04D3B7651DD7EULL),
    Key(0x5E90277E7CB39E2DULL), Key(0x2C046F22062DC67DULL), Key(0xB10BB459132D0A26ULL),
    Key(0x3FA9DDFB67E2F199ULL), Key(0x0E09B88E1914F7AFULL), Key(0x10E8B35AF3EEAB37ULL),
    Key(0x9EEDECA8E272B933ULL), Key(0xD4C718BC4AE8AE5FULL), Key(0x81536D601170FC20ULL),
    Key(0x91B534F885818A06ULL), Key(0xEC8177F83F900978ULL), Key(0x190E714FADA5156EULL),
    Key(0xB592BF39B0364963ULL), Key(0x89C350C893AE7DC1ULL), Key(0xAC042E70F8B383F2ULL),
    Key(0xB49B52E587A1EE60ULL), Key(0xFB152FE3FF26DA89ULL), Key(0x3E666E6F69AE2C15ULL),
    Key(0x3B544EBE544C19F9ULL), Key(0xE805A1E290CF2456ULL), Key(0x24B33C9D7ED25117ULL),
    Key(0xE74733427B72F0C1ULL), Key(0x0A804D18B7097475ULL), Key(0x57E3306D881EDB4FULL),
    Key(0x4AE7D6A36EB5DBCBULL), Key(0x2D8D5432157064C8ULL), Key(0xD1E649DE1E7F268BULL),
    Key(0x8A328A1CEDFE552CULL), Key(0x07A3AEC79624C7DAULL), Key(0x84547DDC3E203C94ULL),
    Key(0x990A98FD5071D263ULL), Key(0x1A4FF12616EEFC89ULL), Key(0xF6F7FD1431714200ULL),
    Key(0x30C05B1BA332F41CULL), Key(0x8D2636B81555A786ULL), Key(0x46C9FEB55D120902ULL),
    Key(0xCCEC0A73B49C9921ULL), Key(0x4E9D2827355FC492ULL), Key(0x19EBB029435DCB0FULL),
    Key(0x4659D2B743848A2CULL), Key(0x963EF2C96B33BE31ULL), Key(0x74F85198B05A2E7DULL),
    Key(0x5A0F544DD2B1FB18ULL), Key(0x03727073C2E134B1ULL), Key(0xC7F6AA2DE59AEA61ULL),
    Key(0x352787BAA0D7C22FULL), Key(0x9853EAB63B5E0B35ULL), Key(0xABBDCDD7ED5C0860ULL),
    Key(0xCF05DAF5AC8D77B0ULL), Key(0x49CAD48CEBF4A71EULL), Key(0x7A4C10EC2158C4A6ULL),
    Key(0xD9E92AA246BF719EULL), Key(0x13AE978D09FE5557ULL), Key(0x730499AF921549FFULL),
    Key(0x4E4B705B92903BA4ULL), Key(0xFF577222C14F0A3AULL), Key(0x55B6344CF97AAFAEULL),
    Key(0xB862225B055B6960ULL), Key(0xCAC09AFBDDD2CDB4ULL), Key(0xDAF8E9829FE96B5FULL),
    Key(0xB5FDFC5D3132C498ULL), Key(0x310CB380DB6F7503ULL), Key(0xE87FBB46217A360EULL),
    Key(0x2102AE466EBB1148ULL), Key(0xF8549E1A3AA5E00DULL), Key(0x07A69AFDCC42261AULL),
    Key(0xC4C118BFE78FEAAEULL), Key(0xF9F4892ED96BD438ULL), Key(0x1AF3DBE25D8F45DAULL),
    Key(0xF5B4B0B0D2DEEEB4ULL), Key(0x962ACEEFA82E1C84ULL), Key(0x046E3ECAAF453CE9ULL),
    Key(0xF05D129681949A4CULL), Key(0x964781CE734B3C84ULL), Key(0x9C2ED44081CE5FBDULL),
    Key(0x522E23F3925E319EULL), Key(0x177E00F9FC32F791ULL), Key(0x2BC60A63A6F3B3F2ULL),
    Key(0x222BBFAE61725606ULL), Key(0x486289DDCC3D6780ULL), Key(0x7DC7785B8EFDFC80ULL),
    Key(0x8AF38731C02BA980ULL), Key(0x1FAB64EA29A2DDF7ULL), Key(0xE4D9429322CD065AULL),
    Key(0x9DA058C67844F20CULL), Key(0x24C0E332B70019B0ULL), Key(0x233003B5A6CFE6ADULL),
    Key(0xD586BD01C5C217F6ULL), Key(0x5E5637885F29BC2BULL), Key(0x7EBA726D8C94094BULL),
    Key(0x0A56A5F0BFE39272ULL), Key(0xD79476A84EE20D06ULL), Key(0x9E4C1269BAA4BF37ULL),
    Key(0x17EFEE45B0DEE640ULL), Key(0x1D95B0A5FCF90BC6ULL), Key(0x93CBE0B699C2585DULL),
    Key(0x65FA4F227A2B6D79ULL), Key(0xD5F9E858292504D5ULL), Key(0xC2B5A03F71471A6FULL),
    Key(0x59300222B4561E00ULL), Key(0xCE2F8642CA0712DCULL), Key(0x7CA9723FBB2E8988ULL),
    Key(0x2785338347F2BA08ULL), Key(0xC61BB3A141E50E8CULL), Key(0x150F361DAB9DEC26ULL),
    Key(0x9F6A419D382595F4ULL), Key(0x64A53DC924FE7AC9ULL), Key(0x142DE49FFF7A7C3DULL),
    Key(0x0C335248857FA9E7ULL), Key(0x0A9C32D5EAE45305ULL), Key(0xE6C42178C4BBB92EULL),
    Key(0x71F1CE2490D20B07ULL), Key(0xF1BCC3D275AFE51AULL), Key(0xE728E8C83C334074ULL),
    Key(0x96FBF83A12884624ULL), Key(0x81A1549FD6573DA5ULL), Key(0x5FA7867CAF35E149ULL),
    Key(0x56986E2EF3ED091BULL), Key(0x917F1DD5F8886C61ULL), Key(0xD20D8C88C8FFE65FULL),
    Key(0x31D71DCE64B2C310ULL), Key(0xF165B587DF898190ULL), Key(0xA57E6339DD2CF3A0ULL),
    Key(0x1EF6E6DBB1961EC9ULL), Key(0x70CC73D90BC26E24ULL), Key(0xE21A6B35DF0C3AD7ULL),
    Key(0x003A93D8B2806962ULL), Key(0x1C99DED33CB890A1ULL), Key(0xCF3145DE0ADD4289ULL),
    Key(0xD0E4427A5514FB72ULL), Key(0x77C621CC9FB3A483ULL), Key(0x67A34DAC4356550BULL),
    Key(0xF8D626AAAF278509ULL)
  };

  // Offsets to the PolyGlotRandoms[] array of zobrist keys
  const Key* ZobPiece     = PolyGlotRandoms +   0;
  const Key* ZobCastle    = PolyGlotRandoms + 768;
  const Key* ZobEnPassant = PolyGlotRandoms + 772;
  const Key* ZobTurn      = PolyGlotRandoms + 780;

  // book_key() returns the PolyGlot hash key of the given position
  uint64_t book_key(const Position& pos) {

    Key key;
    Bitboard b = pos.pieces();

    while (b)
    {
        // Piece offset is at 64 * polyPiece where polyPiece is defined as:
        // BP = 0, WP = 1, BN = 2, WN = 3, ... BK = 10, WK = 11
        Square s = pop_lsb(&b);
        Piece p = pos.piece_on(s);
        int polyPiece = 2 * (type_of(p) - 1) + (color_of(p) == WHITE);
        key ^= ZobPiece[64 * polyPiece + s];
    }

    b = pos.can_castle(ALL_CASTLES);

    while (b)
        key ^= ZobCastle[pop_lsb(&b)];

    if (pos.ep_square() != SQ_NONE)
        key ^= ZobEnPassant[file_of(pos.ep_square())];

    if (pos.side_to_move() == WHITE)
        key ^= ZobTurn[0];

    return key.getInt();
  }

} // namespace

Book::Book() : size(0) {

  for (int i = Time::current_time().msec() % 10000; i > 0; i--)
      RKiss.rand<unsigned>(); // Make random number generation less deterministic
}

Book::~Book() { if (is_open()) close(); }


/// Book::operator>>() reads sizeof(T) chars from the file's binary byte stream
/// and converts them in a number of type T. A Polyglot book stores numbers in
/// big-endian format.

template<typename T> Book& Book::operator>>(T& n) {

  n = 0;
  for (size_t i = 0; i < sizeof(T); i++)
      n = T((n << 8) + ifstream::get());

  return *this;
}

template<> Book& Book::operator>>(BookEntry& e) {
  return *this >> e.key >> e.move >> e.count >> e.learn;
}


/// Book::open() tries to open a book file with the given name after closing
/// any exsisting one.

bool Book::open(const char* fName) {

  fileName = "";

  if (is_open()) // Cannot close an already closed file
      close();

  ifstream::open(fName, ifstream::in | ifstream::binary | ios::ate);

  if (!is_open())
  {
      clear();
      return false; // Silently fail if the file is not found
  }

  // Get the book size in number of entries, we are already at the end of file
  size = (size_t)tellg() / sizeof(BookEntry);

  if (!good())
  {
      cerr << "Failed to open book file " << fName << endl;
      exit(EXIT_FAILURE);
  }

  fileName = fName; // Set only if successful
  return true;
}


/// Book::probe() tries to find a book move for the given position. If no move
/// is found returns MOVE_NONE. If pickBest is true returns always the highest
/// rated move, otherwise randomly chooses one, based on the move score.

Move Book::probe(const Position& pos, const string& fName, bool pickBest) {

  BookEntry e;
  uint16_t best = 0;
  unsigned sum = 0;
  Move move = MOVE_NONE;
  uint64_t key = book_key(pos);

  if (fileName != fName && !open(fName.c_str()))
      return MOVE_NONE;

  binary_search(key);

  while (*this >> e, e.key == key && good())
  {
      best = max(best, e.count);
      sum += e.count;

      // Choose book move according to its score. If a move has a very
      // high score it has higher probability to be choosen than a move
      // with lower score. Note that first entry is always chosen.
      if (   (sum && RKiss.rand<unsigned>() % sum < e.count)
          || (pickBest && e.count == best))
          move = Move(e.move);
  }

  if (!move)
      return MOVE_NONE;

  // A PolyGlot book move is encoded as follows:
  //
  // bit  0- 5: destination square (from 0 to 63)
  // bit  6-11: origin square (from 0 to 63)
  // bit 12-14: promotion piece (from KNIGHT == 1 to QUEEN == 4)
  //
  // Castling moves follow "king captures rook" representation. So in case book
  // move is a promotion we have to convert to our representation, in all the
  // other cases we can directly compare with a Move after having masked out
  // the special Move's flags (bit 14-15) that are not supported by PolyGlot.
  int pt = (move >> 12) & 7;
  if (pt)
      move = make<PROMOTION>(from_sq(move), to_sq(move), PieceType(pt + 1));

  // Add 'special move' flags and verify it is legal
  for (MoveList<LEGAL> ml(pos); !ml.end(); ++ml)
      if (move == (ml.move() & 0x3FFF))
          return ml.move();

  return MOVE_NONE;
}


/// Book::binary_search() takes a book key as input, and does a binary search
/// through the book file for the given key. File stream current position is set
/// to the leftmost book entry with the same key as the input.

void Book::binary_search(uint64_t key) {

  size_t low, high, mid;
  BookEntry e;

  low = 0;
  high = size - 1;

  assert(low <= high);

  while (low < high && good())
  {
      mid = (low + high) / 2;

      assert(mid >= low && mid < high);

      seekg(mid * sizeof(BookEntry), ios_base::beg);
      *this >> e;

      if (key <= e.key)
          high = mid;
      else
          low = mid + 1;
  }

  assert(low == high);

  seekg(low * sizeof(BookEntry), ios_base::beg);
}
